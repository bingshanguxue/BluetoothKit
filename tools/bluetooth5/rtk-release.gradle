import java.text.SimpleDateFormat

static def releaseTime() {
    return new Date().format("MMdd", TimeZone.getTimeZone("UTC"))
}

static def getCurrentTime() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US)
    sdf.format(new Date(java.lang.System.currentTimeMillis()))
}


static def getUserName() {
    System.getProperty("user.name")
}

static def getOSName() {
    System.getProperty("os.name")
}

//对于android library编译，我会disable所有的debug编译任务
def disableDebugBuild() {
    //project.tasks包含了所有的tasks，下面的findAll是寻找那些名字中带debug的Task。
    //返回值保存到targetTasks容器中
    def targetTasks = project.tasks.findAll { task ->
        task.name.contains("Debug")
    }
    //对满足条件的task，设置它为disable。如此这般，这个Task就不会被执行
    targetTasks.each {
        println "disable debug task  :${it.name}"
        it.setEnabled false
    }
}

//tasks.withType(JavaCompile) {
//    compileTask -> compileTask.dependsOn generateRelease
//}

tasks.getByName("assemble") {
    println "Welcome to Gradle $gradle.gradleVersion - http://www.gradle.org\n" +
            "Gradle home : $gradle.gradleHomeDir \n" +
            "Gradle user directory : $gradle.gradleUserHomeDir \n"

    it.doFirst {
        project.ext.versionName = android.defaultConfig.versionName
        println "$project.name: releaseTime: ${releaseTime()}\n" +
                "\tcurrentTime: ${getCurrentTime()}\n" +
                "\tuserName: ${getUserName()}\n" +
                "\tOS: ${getOSName()}"
    }
    it.doLast {
        println "$project.name: module : $name\n" +
                "\tversionName : $versionName"
    }
}

//afterEvaluate {
//    taskxx.doLast{}
//}

//将函数设置为extra属性中去，这样，加载utils.gradle的Project就能调用此文件中定义的函数了
ext {
    releaseTime = this.&releaseTime
    getCurrentTime = this.&getCurrentTime
    getUserName = this.&getUserName
    getOSName = this.&getOSName
//    getVersionNameAdvanced = this.&getVersionNameAdvanced
    disableDebugBuild = this.&disableDebugBuild
}
